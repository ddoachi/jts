# <%= className %> Service

## Overview

<%= className %> is a NestJS-based microservice in the JTS trading system.

## Quick Start

```bash
# Development
npm run dev:<%= projectName %>

# Testing
npm run test:<%= projectName %>

# Building
npm run build:<%= projectName %>

# Docker
npm run docker:<%= projectName %>
```

## Architecture

```
src/
├── app/              # Application layer (controllers, modules)
│   └── health/       # Health check endpoints
├── domain/           # Business logic layer
│   ├── entities/     # Domain models
│   ├── services/     # Business logic
│   └── events/       # Domain events
├── infra/            # Infrastructure layer
│   ├── database/     # Database connections
│   ├── kafka/        # Message queue
│   └── cache/        # Redis cache
└── shared/           # Shared utilities
    ├── guards/       # Auth guards
    ├── interceptors/ # Request interceptors
    └── filters/      # Exception filters
```

## Environment Variables

Copy `.env.example` to `.env.local` and update values:

```bash
cp .env.example .env.local
```

## API Documentation

When running in development, Swagger documentation is available at:
http://localhost:<%= port %>/api-docs

## Health Checks

- **Liveness**: `GET /health`
- **Readiness**: `GET /health/ready`

## Development

### Adding New Features

1. **Domain Logic**: Add to `src/domain/`
2. **External Services**: Add to `src/infra/`
3. **API Endpoints**: Add to `src/app/`

### Testing

```bash
# Unit tests
npm run test:<%= projectName %>

# E2E tests
npm run test:e2e:<%= projectName %>

# Test coverage
npm run test:cov:<%= projectName %>
```

## Deployment

### Docker

```bash
# Build image
docker build -t jts/<%= projectName %>:latest .

# Run container
docker run -p <%= port %>:<%= port %> jts/<%= projectName %>:latest
```

### Kubernetes

Apply the Kubernetes manifests:

```bash
kubectl apply -f k8s/
```

## Monitoring

- **Metrics**: Available at `http://localhost:9090/metrics`
- **Logs**: Structured JSON logging to stdout
- **Tracing**: OpenTelemetry support (if configured)

## Contributing

1. Create feature branch
2. Make changes following JTS coding standards
3. Write tests
4. Submit pull request

## License

Proprietary - JTS Trading System