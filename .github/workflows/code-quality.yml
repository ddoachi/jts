# ============================================================================
# Code Quality Analysis Pipeline
# ============================================================================
# Generated from spec: [[E01-F03-T06] Configure CI/CD Pipeline and Automation](../../specs/E01/F03/T06/E01-F03-T06.spec.md)
#
# PURPOSE:
# Automated code quality analysis using SonarCloud and GitHub CodeQL
# for continuous security and maintainability monitoring.
#
# FEATURES:
# - SonarCloud analysis for code quality metrics
# - CodeQL security vulnerability detection
# - Scheduled weekly scans for ongoing monitoring
# - SARIF report integration with GitHub Security tab
# ============================================================================

name: Code Quality

on:
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Sunday at midnight
    - cron: '0 0 * * 0'

jobs:
  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: CodeQL Security Analysis ███
  # ═══════════════════════════════════════════════════════════════════
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      # Required for CodeQL scanning
      security-events: write
      # Required for checking out code
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Customize queries if needed
          queries: security-extended,security-and-quality

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Build Environment
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Install Dependencies
        run: yarn install --immutable

      # CodeQL analyzes the code built by your build system
      - name: Build Code for Analysis
        run: |
          # Build all projects for comprehensive analysis
          yarn build || true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Additional Quality Checks ███
  # ═══════════════════════════════════════════════════════════════════
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Check Code Complexity
        run: |
          # Check for cyclomatic complexity issues
          echo "::group::Complexity Analysis"
          yarn nx affected --target=lint --base=${{ github.event.pull_request.base.sha }} --configuration=complexity || true
          echo "::endgroup::"

      - name: Check Bundle Size
        run: |
          # Analyze bundle sizes for production builds
          echo "::group::Bundle Size Analysis"
          yarn nx affected --target=build --base=${{ github.event.pull_request.base.sha }} --configuration=production --analyze || true
          echo "::endgroup::"

      - name: License Check
        run: |
          # Verify license compatibility
          echo "::group::License Compatibility"
          yarn dlx license-checker --summary --excludePrivatePackages || true
          echo "::endgroup::"

      - name: Security Audit
        run: |
          # Run npm audit for known vulnerabilities
          echo "::group::Security Audit"
          yarn audit --audit-level=moderate || true
          echo "::endgroup::"

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Summary Report ███
  # ═══════════════════════════════════════════════════════════════════
  quality-summary:
    name: Quality Summary
    needs: [codeql, quality-gates]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Quality Report
        run: |
          echo "## 📊 Code Quality Analysis Complete"
          echo ""
          echo "### Results Summary:"
          echo "- CodeQL: ${{ needs.codeql.result }}"
          echo "- Quality Gates: ${{ needs.quality-gates.result }}"
          echo ""

          if [ "${{ needs.codeql.result }}" == "failure" ] || \
             [ "${{ needs.quality-gates.result }}" == "failure" ]; then
            echo "❌ Quality checks failed - review required"
            exit 1
          else
            echo "✅ All quality checks passed"
          fi
