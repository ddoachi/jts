# ============================================================================
# JTS CI/CD Pipeline - Enhanced Version with Additional Features
# ============================================================================
# Generated from spec: [[E01-F04-T02] Main CI Pipeline Configuration](../../specs/E01/F04/T02/E01-F04-T02.spec.md)
#
# PURPOSE: 
# Enhanced CI pipeline with format checking, integration tests, E2E tests,
# matrix strategies, and coverage gates while preserving working functionality
#
# FEATURES ADDED:
# - Format checking as separate job
# - Matrix strategy for code quality checks
# - Integration test job with service containers
# - E2E test job with proper error handling
# - Explicit coverage gate enforcement
# - Environment-specific configurations
# ============================================================================

name: CI/CD Pipeline Enhanced

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  NX_CLOUD_DISTRIBUTED_EXECUTION: false
  NX_DAEMON: false
  # Environment-specific configuration
  CI_ENVIRONMENT: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'development' }}

jobs:
  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Setup and Calculate Affected Projects ███
  # ═══════════════════════════════════════════════════════════════════
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.affected.outputs.apps }}
      affected-libs: ${{ steps.affected.outputs.libs }}
      has-affected: ${{ steps.affected.outputs.has-affected }}
      base-sha: ${{ steps.base.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine Base SHA
        id: base
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "sha=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=$(git rev-parse HEAD~1)" >> $GITHUB_OUTPUT
          fi
          echo "Base SHA: $([ "${{ github.event_name }}" == "pull_request" ] && echo "${{ github.event.pull_request.base.sha }}" || echo "$(git rev-parse HEAD~1)")"

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Calculate Affected
        id: affected
        run: |
          # Use the base SHA from previous step
          NX_BASE=${{ steps.base.outputs.sha }}
          
          # Calculate affected projects
          AFFECTED_APPS=$(yarn nx show projects --affected --base=$NX_BASE --head=HEAD --type=app)
          AFFECTED_LIBS=$(yarn nx show projects --affected --base=$NX_BASE --head=HEAD --type=lib)
          HAS_AFFECTED=$(yarn nx show projects --affected --base=$NX_BASE --head=HEAD | grep -q '.' && echo 'true' || echo 'false')

          # Output results for downstream jobs
          echo "apps=$AFFECTED_APPS" >> $GITHUB_OUTPUT
          echo "libs=$AFFECTED_LIBS" >> $GITHUB_OUTPUT
          echo "has-affected=$HAS_AFFECTED" >> $GITHUB_OUTPUT

          # Display affected projects for debugging
          echo "::group::Affected Projects"
          echo "Apps: $AFFECTED_APPS"
          echo "Libs: $AFFECTED_LIBS"
          echo "Has Affected: $HAS_AFFECTED"
          echo "::endgroup::"

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Code Quality Checks with Matrix Strategy ███
  # ═══════════════════════════════════════════════════════════════════
  code-quality:
    name: Code Quality (${{ matrix.check }})
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        check: [lint, type-check, format]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Run Lint Check
        if: matrix.check == 'lint'
        run: |
          echo "🔍 Running lint checks on affected projects..."
          yarn nx affected --target=lint --base=${{ needs.setup.outputs.base-sha }} --parallel=3

      - name: Run Type Check
        if: matrix.check == 'type-check'
        run: |
          echo "📝 Running type checks on affected projects..."
          yarn nx affected --target=type-check --base=${{ needs.setup.outputs.base-sha }} --parallel=3

      - name: Check Formatting
        if: matrix.check == 'format'
        run: |
          echo "🎨 Checking code formatting..."
          yarn nx format:check --base=${{ needs.setup.outputs.base-sha }}

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Unit Testing with Coverage Gates ███
  # ═══════════════════════════════════════════════════════════════════
  test-unit:
    name: Unit Tests
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Run Unit Tests
        run: |
          echo "🧪 Running unit tests with coverage..."
          yarn nx affected --target=test --base=${{ needs.setup.outputs.base-sha }} --parallel=3 --configuration=ci --coverage

      - name: Coverage Quality Gate
        run: |
          # Check if coverage summary exists
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
            echo "📊 Coverage: $COVERAGE%"
            
            if (( $(echo "$COVERAGE < 95" | bc -l) )); then
              echo "❌ Coverage $COVERAGE% is below required 95%"
              echo "::error::Coverage is below the required threshold of 95%"
              exit 1
            else
              echo "✅ Coverage $COVERAGE% meets requirement"
            fi
          else
            echo "⚠️ Coverage report not found, skipping gate check"
          fi

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true
          flags: unit

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Integration Testing with Service Containers ███
  # ═══════════════════════════════════════════════════════════════════
  test-integration:
    name: Integration Tests
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_pass
          POSTGRES_USER: test_user
          POSTGRES_DB: jts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mongodb:
        image: mongo:6-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_pass
          MONGO_INITDB_DATABASE: jts_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/jts_test
          REDIS_URL: redis://localhost:6379
          MONGODB_URI: mongodb://test_user:test_pass@localhost:27017/jts_test?authSource=admin
        run: |
          echo "🔗 Checking for integration test targets..."
          if yarn nx show projects --with-target=integration-test | grep -q .; then
            echo "✅ Found integration test projects, running tests..."
            yarn nx affected --target=integration-test --base=${{ needs.setup.outputs.base-sha }} --parallel=2
          else
            echo "⚠️ No integration test targets found, skipping"
            echo "This is expected if integration tests haven't been implemented yet"
          fi

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: E2E Testing (Conditional) ███
  # ═══════════════════════════════════════════════════════════════════
  test-e2e:
    name: E2E Tests
    needs: [setup, code-quality, test-unit]
    if: |
      needs.setup.outputs.has-affected == 'true' &&
      (github.event_name == 'push' || github.event.pull_request.draft == false)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Start Docker Services
        run: |
          # Check if docker-compose file exists
          if [ -f "configs/docker/docker-compose.dev.yml" ]; then
            echo "🐳 Starting Docker services..."
            docker compose -f configs/docker/docker-compose.dev.yml up -d
            echo "⏳ Waiting for services to be ready (60s)..."
            sleep 60
            
            # Check service health if script exists
            if [ -f "scripts/development/check-services-health.js" ]; then
              echo "🏥 Checking service health..."
              yarn dev:health || echo "⚠️ Some services may not be fully ready"
            fi
          else
            echo "⚠️ Docker compose file not found, skipping service startup"
          fi

      - name: Run E2E Tests
        run: |
          echo "🎭 Checking for E2E test targets..."
          if yarn nx show projects --with-target=e2e | grep -q .; then
            echo "✅ Found E2E test projects, running tests..."
            yarn nx affected --target=e2e --base=${{ needs.setup.outputs.base-sha }} --parallel=1
          else
            echo "⚠️ No E2E test targets found, skipping"
            echo "This is expected if E2E tests haven't been implemented yet"
          fi

      - name: Stop Docker Services
        if: always()
        run: |
          if [ -f "configs/docker/docker-compose.dev.yml" ]; then
            echo "🛑 Stopping Docker services..."
            docker compose -f configs/docker/docker-compose.dev.yml down
          fi

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Build and Artifacts ███
  # ═══════════════════════════════════════════════════════════════════
  build:
    name: Build
    needs: [code-quality, test-unit, test-integration]
    if: always() && needs.setup.outputs.has-affected == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Build Affected
        id: build
        run: |
          echo "🏗️ Building affected projects..."
          yarn nx affected --target=build --base=${{ needs.setup.outputs.base-sha }} --parallel=3 --configuration=production
          
          # Check if any builds were created
          if [ -d "dist/" ] && [ "$(ls -A dist/)" ]; then
            echo "has-artifacts=true" >> $GITHUB_OUTPUT
          else
            echo "has-artifacts=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Build Artifacts
        if: steps.build.outputs.has-artifacts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Security Scanning ███
  # ═══════════════════════════════════════════════════════════════════
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Final Status Check ███
  # ═══════════════════════════════════════════════════════════════════
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [setup, code-quality, test-unit, test-integration, test-e2e, build, security-scan]
    if: always()
    steps:
      - name: Generate Job Summary
        run: |
          echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Results table
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result == 'success' && '✅ Success' || needs.setup.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Success' || needs.code-quality.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-unit.result == 'success' && '✅ Success' || needs.test-unit.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.test-integration.result == 'success' && '✅ Success' || needs.test-integration.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Success' || needs.test-e2e.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Success' || needs.build.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-scan.result == 'success' && '✅ Success' || needs.security-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.CI_ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Affected Projects**: ${{ needs.setup.outputs.has-affected == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Check CI Status
        run: |
          if [ "${{ needs.setup.outputs.has-affected }}" == "false" ]; then
            echo "✅ No affected projects to test"
            exit 0
          fi

          # Check for any failures
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "❌ CI Pipeline failed"
            exit 1
          fi

          # Check for cancellations
          if [ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]; then
            echo "⚠️ CI Pipeline was cancelled"
            exit 1
          fi

          echo "✅ CI Pipeline passed successfully"