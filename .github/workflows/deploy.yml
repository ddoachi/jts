# ============================================================================
# JTS Deployment Pipeline
# ============================================================================
# Generated from spec: [[E01-F03-T06] Configure CI/CD Pipeline and Automation](../../specs/E01/F03/T06/E01-F03-T06.spec.md)
#
# PURPOSE: 
# Manual deployment workflow for JTS microservices to staging and production
# environments with Docker image building and registry management.
#
# FEATURES:
# - Environment-specific deployments (staging/production)
# - Service-specific or full deployment options
# - Docker image building and pushing to GitHub Container Registry
# - Kubernetes deployment support (placeholder for actual implementation)
# ============================================================================

name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      service:
        description: 'Service to deploy (leave empty for all)'
        required: false
        type: string

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io

jobs:
  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Deployment Preparation ███
  # ═══════════════════════════════════════════════════════════════════
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.services.outputs.list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Services
        id: services
        run: |
          # WHY: Allow selective deployment of specific services or all services
          # HOW: Check input parameter and build service list accordingly
          # WHAT: Output JSON array of services to deploy
          
          if [ -z "${{ inputs.service }}" ]; then
            # Deploy all services - scan apps directory
            SERVICES=$(ls apps/ | jq -R -s -c 'split("\n")[:-1]')
            echo "🚀 Deploying all services to ${{ inputs.environment }}"
          else
            # Deploy specific service
            SERVICES='["${{ inputs.service }}"]'
            echo "🚀 Deploying ${{ inputs.service }} to ${{ inputs.environment }}"
          fi
          
          echo "list=$SERVICES" >> $GITHUB_OUTPUT
          
          # Display deployment summary
          echo "::group::Deployment Summary"
          echo "Environment: ${{ inputs.environment }}"
          echo "Services: $SERVICES"
          echo "::endgroup::"

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Build and Push Docker Images ███
  # ═══════════════════════════════════════════════════════════════════
  build-and-push:
    name: Build and Push Images
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build Service
        run: |
          # Build the service using Nx with production configuration
          echo "📦 Building ${{ matrix.service }} for production..."
          npx nx build ${{ matrix.service }} --configuration=production
          
          # Verify build output
          if [ -d "dist/apps/${{ matrix.service }}" ]; then
            echo "✅ Build successful for ${{ matrix.service }}"
            ls -la dist/apps/${{ matrix.service }}
          else
            echo "❌ Build failed - output directory not found"
            exit 1
          fi

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ inputs.environment }}
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_VERSION=${{ github.sha }}
            NODE_ENV=${{ inputs.environment }}

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Deploy to Environment ███
  # ═══════════════════════════════════════════════════════════════════
  deploy:
    name: Deploy to ${{ inputs.environment }}
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Kubernetes
        run: |
          # PLACEHOLDER: Actual deployment implementation
          # This section would contain kubectl commands or Helm deployment
          
          echo "::group::Deployment Configuration"
          echo "Environment: ${{ inputs.environment }}"
          echo "Services: ${{ needs.prepare.outputs.services }}"
          echo "Image Tag: ${{ github.sha }}"
          echo "Registry: ${{ env.REGISTRY }}/${{ github.repository }}"
          echo "::endgroup::"
          
          echo "⚠️ Note: Actual Kubernetes deployment commands need to be implemented"
          echo "This would typically include:"
          echo "  1. kubectl config setup"
          echo "  2. Image update in deployment manifests"
          echo "  3. kubectl apply or helm upgrade"
          echo "  4. Deployment verification"
          
          # Example placeholder commands (commented out):
          # kubectl config use-context ${{ inputs.environment }}-cluster
          # kubectl set image deployment/service-name service-name=${{ env.REGISTRY }}/${{ github.repository }}/service-name:${{ github.sha }}
          # kubectl rollout status deployment/service-name

      - name: Verify Deployment
        run: |
          # PLACEHOLDER: Health check verification
          echo "🔍 Verifying deployment health..."
          echo "This would include:"
          echo "  - Pod status checks"
          echo "  - Service endpoint health checks"
          echo "  - Readiness/liveness probe verification"

      - name: Deployment Summary
        if: always()
        run: |
          echo "::group::Deployment Complete"
          echo "✅ Deployment workflow completed"
          echo "Environment: ${{ inputs.environment }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "::endgroup::"

  # ═══════════════════════════════════════════════════════════════════
  # ███ SECTION: Rollback Support ███
  # ═══════════════════════════════════════════════════════════════════
  rollback:
    name: Rollback (if needed)
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Rollback Deployment
        run: |
          # PLACEHOLDER: Rollback implementation
          echo "⚠️ Deployment failed - initiating rollback"
          echo "This would include:"
          echo "  - kubectl rollout undo"
          echo "  - Previous version restoration"
          echo "  - Health check verification"
          
          # Example rollback commands (commented out):
          # kubectl rollout undo deployment/service-name
          # kubectl rollout status deployment/service-name