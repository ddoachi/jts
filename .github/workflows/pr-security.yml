# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# ‚ñà‚ñà‚ñà PR Security Analysis & Compliance Workflow ‚ñà‚ñà‚ñà
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
#
# **Generated from spec**: [[E01-F04-T03] Security Scanning Workflows](../../specs/E01/F04/T03/E01-F04-T03.spec.md)
#
# WHY: Focused security analysis for Pull Requests to catch security issues before merge
# HOW: Analyze only changed files for performance, provide actionable feedback to developers
# WHAT: PR-specific security checks with educational comments and automated PR reviews
#
# CRITICAL FIXES from T01:
# ‚úÖ Use `docker compose` (space) not `docker-compose` (hyphen)
# ‚úÖ Use modern Nx syntax: `nx show projects --affected` not `nx print-affected`
# ‚úÖ Convert multiline output to single-line: `| tr '\n' ',' | sed 's/,$//'`
# ‚úÖ Use `yarn` consistently, not `npm`
# ‚úÖ Handle missing projects gracefully with existence checks
# ‚úÖ For Nx cache: `rm -rf .nx/cache || true` before `yarn nx reset || true`

name: 'PR Security Analysis'

on:
  # WHY: Only run on PRs to provide targeted security feedback
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  
  # WHY: Allow manual triggering for security incident response
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze (leave empty for current PR)'
        required: false
        type: string
      force_full_scan:
        description: 'Force full repository scan instead of changed files only'
        required: false
        default: false
        type: boolean

# WHY: Security-focused permissions with ability to comment on PRs
# SECURITY: Minimize permissions while allowing PR interaction and security reporting
permissions:
  contents: read              # Read repository content and PR changes
  pull-requests: write        # Comment on PRs with security findings
  security-events: write      # Upload SARIF results to GitHub Security
  checks: write              # Create PR checks for security gates
  actions: read              # Read workflow status
  id-token: write            # For OIDC authentication if needed

# WHY: Environment variables optimized for PR-focused security analysis
env:
  NODE_VERSION: '20.x'
  YARN_CACHE_FOLDER: .yarn/cache
  NX_CLOUD_DISTRIBUTED_EXECUTION: false  # Disable for security consistency
  NX_DAEMON: false                        # Disable for deterministic results
  FORCE_COLOR: 0                         # Disable colors for cleaner logs
  # SECURITY: Never log sensitive data in PR security workflows

jobs:
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB: PR Security Preparation & Change Analysis
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  pr-security-preparation:
    name: 'Analyze PR Changes for Security Impact'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    # WHY: Skip draft PRs unless explicitly requested
    if: github.event.pull_request.draft != true || github.event_name == 'workflow_dispatch'
    
    outputs:
      # WHY: Output change analysis for downstream security jobs
      changed-files: ${{ steps.changed-files.outputs.files }}
      changed-packages: ${{ steps.analyze-changes.outputs.packages }}
      security-impact: ${{ steps.security-impact.outputs.level }}
      scan-scope: ${{ steps.determine-scope.outputs.scope }}
      has-security-relevant-changes: ${{ steps.security-impact.outputs.has-security-changes }}
      affected-projects: ${{ steps.nx-analysis.outputs.affected-projects }}
      dependency-changes: ${{ steps.analyze-changes.outputs.dependency-changes }}
      container-changes: ${{ steps.analyze-changes.outputs.container-changes }}

    steps:
      - name: 'Checkout PR Branch'
        uses: actions/checkout@v4
        with:
          # WHY: Need full history and PR context for comprehensive change analysis
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: 'Setup Node Environment'
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          install-deps: true

      - name: 'Analyze Changed Files'
        id: changed-files
        run: |
          echo "üîç Analyzing changed files in PR #${{ github.event.pull_request.number }}..."
          
          # Get base branch reference
          BASE_BRANCH="${{ github.event.pull_request.base.ref || 'main' }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
          
          echo "Comparing against base branch: origin/$BASE_BRANCH"
          
          # Get all changed files
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...$HEAD_SHA | tr '\n' ' ')
          
          # Create JSON array for easier processing
          CHANGED_FILES_JSON=$(git diff --name-only origin/$BASE_BRANCH...$HEAD_SHA | jq -R -s -c 'split("\n")[:-1]')
          
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "files-json=$CHANGED_FILES_JSON" >> $GITHUB_OUTPUT
          
          echo "üìä Found $(echo $CHANGED_FILES | wc -w) changed files"
          echo "Changed files: $CHANGED_FILES"

      - name: 'Analyze Change Impact'
        id: analyze-changes
        run: |
          echo "üìã Analyzing security impact of changes..."
          
          CHANGED_FILES="${{ steps.changed-files.outputs.files }}"
          DEPENDENCY_CHANGES="false"
          CONTAINER_CHANGES="false"
          AFFECTED_PACKAGES=""
          
          # Check for dependency file changes
          if echo "$CHANGED_FILES" | grep -E "(package\.json|yarn\.lock|package-lock\.json|pnpm-lock\.yaml)" > /dev/null; then
            echo "üì¶ Dependency files changed - will perform enhanced dependency scanning"
            DEPENDENCY_CHANGES="true"
          fi
          
          # Check for container/Docker changes
          if echo "$CHANGED_FILES" | grep -E "(Dockerfile|\.dockerignore|docker-compose.*\.yml|\.docker)" > /dev/null; then
            echo "üê≥ Container files changed - will perform enhanced container scanning"
            CONTAINER_CHANGES="true"
          fi
          
          # Identify affected packages (simplified analysis)
          if echo "$CHANGED_FILES" | grep -E "^(apps|libs)/" > /dev/null; then
            AFFECTED_PACKAGES=$(echo "$CHANGED_FILES" | grep -E "^(apps|libs)/" | cut -d'/' -f1-2 | sort -u | tr '\n' ',' | sed 's/,$//')
          fi
          
          echo "dependency-changes=$DEPENDENCY_CHANGES" >> $GITHUB_OUTPUT
          echo "container-changes=$CONTAINER_CHANGES" >> $GITHUB_OUTPUT
          echo "packages=$AFFECTED_PACKAGES" >> $GITHUB_OUTPUT
          
          echo "üìä Change Analysis Results:"
          echo "  - Dependency changes: $DEPENDENCY_CHANGES"
          echo "  - Container changes: $CONTAINER_CHANGES"
          echo "  - Affected packages: $AFFECTED_PACKAGES"

      - name: 'Nx Project Analysis'
        id: nx-analysis
        run: |
          echo "üîß Analyzing affected Nx projects..."
          
          # CRITICAL: Clean Nx cache to prevent stale data
          rm -rf .nx/cache || true
          yarn nx reset || true
          
          # CRITICAL: Use modern Nx syntax with proper error handling
          if yarn nx show projects &>/dev/null; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref || 'main' }}"
            
            # Get affected projects with modern syntax
            AFFECTED_PROJECTS=$(yarn nx show projects --affected --base=origin/$BASE_BRANCH 2>/dev/null | tr '\n' ',' | sed 's/,$//' || echo "")
            
            if [[ -n "$AFFECTED_PROJECTS" ]]; then
              echo "üéØ Affected Nx projects: $AFFECTED_PROJECTS"
            else
              echo "‚ÑπÔ∏è No affected Nx projects detected"
              AFFECTED_PROJECTS=""
            fi
          else
            echo "‚ö†Ô∏è Nx not properly configured or no projects found"
            AFFECTED_PROJECTS=""
          fi
          
          echo "affected-projects=$AFFECTED_PROJECTS" >> $GITHUB_OUTPUT

      - name: 'Determine Security Impact Level'
        id: security-impact
        run: |
          echo "‚öñÔ∏è Determining security impact level..."
          
          CHANGED_FILES="${{ steps.changed-files.outputs.files }}"
          DEPENDENCY_CHANGES="${{ steps.analyze-changes.outputs.dependency-changes }}"
          CONTAINER_CHANGES="${{ steps.analyze-changes.outputs.container-changes }}"
          
          SECURITY_IMPACT="low"
          HAS_SECURITY_CHANGES="false"
          
          # High impact indicators
          if echo "$CHANGED_FILES" | grep -E "\.(env|key|pem|p12|pfx|crt|cer)" > /dev/null; then
            SECURITY_IMPACT="critical"
            HAS_SECURITY_CHANGES="true"
            echo "üö® CRITICAL: Potential secrets or certificate files detected"
          elif echo "$CHANGED_FILES" | grep -E "(auth|security|crypto|jwt|token|password|secret)" > /dev/null; then
            SECURITY_IMPACT="high"
            HAS_SECURITY_CHANGES="true"
            echo "‚ö†Ô∏è HIGH: Security-related code changes detected"
          elif [[ "$DEPENDENCY_CHANGES" == "true" ]] || [[ "$CONTAINER_CHANGES" == "true" ]]; then
            SECURITY_IMPACT="medium"
            HAS_SECURITY_CHANGES="true"
            echo "üì¶ MEDIUM: Dependency or container changes detected"
          elif echo "$CHANGED_FILES" | grep -E "\.(ts|js|tsx|jsx|py|go|java|cpp|c|rs)" > /dev/null; then
            SECURITY_IMPACT="low"
            HAS_SECURITY_CHANGES="true"
            echo "üìù LOW: Source code changes detected"
          fi
          
          echo "level=$SECURITY_IMPACT" >> $GITHUB_OUTPUT
          echo "has-security-changes=$HAS_SECURITY_CHANGES" >> $GITHUB_OUTPUT
          
          echo "üéØ Security Impact Assessment:"
          echo "  - Impact Level: $SECURITY_IMPACT"
          echo "  - Has Security Changes: $HAS_SECURITY_CHANGES"

      - name: 'Determine Scan Scope'
        id: determine-scope
        run: |
          FORCE_FULL="${{ inputs.force_full_scan }}"
          SECURITY_IMPACT="${{ steps.security-impact.outputs.level }}"
          
          if [[ "$FORCE_FULL" == "true" ]] || [[ "$SECURITY_IMPACT" == "critical" ]]; then
            SCOPE="full"
            echo "üîç Using FULL scan scope due to high security impact"
          else
            SCOPE="changed"
            echo "üéØ Using CHANGED files scan scope for performance optimization"
          fi
          
          echo "scope=$SCOPE" >> $GITHUB_OUTPUT

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB: Enhanced Secret Scanning on Changed Files
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  pr-secret-detection:
    name: 'PR Secret Detection'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pr-security-preparation
    
    # WHY: Only run if there are security-relevant changes
    if: needs.pr-security-preparation.outputs.has-security-relevant-changes == 'true'
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: 'Checkout PR Branch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: 'Run Enhanced TruffleHog Secret Scan'
        id: secret-scan
        run: |
          echo "üîê Running enhanced secret detection on PR changes..."
          
          BASE_BRANCH="${{ github.event.pull_request.base.ref || 'main' }}"
          SCAN_SCOPE="${{ needs.pr-security-preparation.outputs.scan-scope }}"
          
          if [[ "$SCAN_SCOPE" == "changed" ]]; then
            echo "üéØ Scanning only changed files for performance"
            
            # Get changed files and scan them specifically
            CHANGED_FILES="${{ needs.pr-security-preparation.outputs.changed-files }}"
            
            if [[ -n "$CHANGED_FILES" ]]; then
              # Create temporary file list for TruffleHog
              echo "$CHANGED_FILES" | tr ' ' '\n' > /tmp/changed-files.txt
              
              # Run TruffleHog on changed files only
              docker run --rm \
                -v "$(pwd):/pwd" \
                -v "/tmp/changed-files.txt:/tmp/files.txt" \
                trufflesecurity/trufflehog:latest \
                filesystem --paths-file=/tmp/files.txt /pwd \
                --only-verified \
                --json \
                --no-update > trufflehog-pr.json || {
                echo "‚ö†Ô∏è TruffleHog completed with potential findings"
              }
            else
              echo "‚ÑπÔ∏è No changed files to scan"
              echo "[]" > trufflehog-pr.json
            fi
          else
            echo "üîç Running full repository scan"
            docker run --rm \
              -v "$(pwd):/pwd" \
              trufflesecurity/trufflehog:latest \
              filesystem /pwd \
              --only-verified \
              --json \
              --no-update > trufflehog-pr.json || {
              echo "‚ö†Ô∏è TruffleHog completed with potential findings"
            }
          fi
          
          # Count findings
          SECRET_COUNT=$(cat trufflehog-pr.json | jq length 2>/dev/null || echo "0")
          echo "secrets-found=$SECRET_COUNT" >> $GITHUB_OUTPUT
          
          echo "üîç Secret scan completed. Found $SECRET_COUNT potential secrets."

      - name: 'Generate SARIF Report'
        if: always()
        run: |
          echo "üìã Converting TruffleHog results to SARIF format..."
          
          # Simple SARIF conversion (basic structure)
          cat > trufflehog-sarif.json << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "TruffleHog PR Security",
                    "version": "3.0",
                    "informationUri": "https://github.com/trufflesecurity/trufflehog"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          
          echo "‚úÖ SARIF report generated"

      - name: 'Upload SARIF Results'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trufflehog-sarif.json
          category: 'TruffleHog PR Secret Detection'
        continue-on-error: true

      - name: 'Analyze Secret Findings'
        if: steps.secret-scan.outputs.secrets-found != '0'
        run: |
          echo "üö® Analyzing secret detection findings..."
          
          SECRET_COUNT="${{ steps.secret-scan.outputs.secrets-found }}"
          
          echo "## üîê Secret Detection Alert" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **$SECRET_COUNT potential secrets detected in this PR**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Immediate Actions Required:" >> $GITHUB_STEP_SUMMARY
          echo "1. üîç Review the findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. üîÑ Remove any committed secrets immediately" >> $GITHUB_STEP_SUMMARY
          echo "3. üîë Rotate any exposed credentials" >> $GITHUB_STEP_SUMMARY
          echo "4. üìù Use environment variables or secret management" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**This PR should not be merged until secrets are resolved.**" >> $GITHUB_STEP_SUMMARY

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB: Dependency Vulnerability Assessment for PR Changes
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  pr-dependency-analysis:
    name: 'PR Dependency Vulnerability Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pr-security-preparation
    
    # WHY: Only run if dependencies changed or high security impact
    if: |
      needs.pr-security-preparation.outputs.dependency-changes == 'true' ||
      needs.pr-security-preparation.outputs.security-impact == 'high' ||
      needs.pr-security-preparation.outputs.security-impact == 'critical'
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: 'Checkout PR Branch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: 'Setup Node Environment'
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          install-deps: true

      - name: 'Analyze Dependency Changes'
        id: dependency-diff
        run: |
          echo "üì¶ Analyzing dependency changes in PR..."
          
          BASE_BRANCH="${{ github.event.pull_request.base.ref || 'main' }}"
          
          # Check if package.json changed
          if git diff origin/$BASE_BRANCH...HEAD --name-only | grep -E "package\.json$" > /dev/null; then
            echo "üìã package.json files changed, analyzing dependency diff"
            
            # Get dependency changes (simplified analysis)
            git diff origin/$BASE_BRANCH...HEAD -- "**/package.json" > package-changes.diff
            
            # Extract added dependencies
            ADDED_DEPS=$(git diff origin/$BASE_BRANCH...HEAD -- "**/package.json" | grep "^\+" | grep -E "\".*\":\s*\"" | grep -v "^\+\+\+" | wc -l || echo "0")
            REMOVED_DEPS=$(git diff origin/$BASE_BRANCH...HEAD -- "**/package.json" | grep "^\-" | grep -E "\".*\":\s*\"" | grep -v "^\-\-\-" | wc -l || echo "0")
            
            echo "dependencies-added=$ADDED_DEPS" >> $GITHUB_OUTPUT
            echo "dependencies-removed=$REMOVED_DEPS" >> $GITHUB_OUTPUT
            echo "has-dependency-changes=true" >> $GITHUB_OUTPUT
            
            echo "üìä Dependency Changes:"
            echo "  - Added: $ADDED_DEPS"
            echo "  - Removed: $REMOVED_DEPS"
          else
            echo "‚ÑπÔ∏è No package.json changes detected"
            echo "has-dependency-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Run Yarn Audit on Current State'
        id: yarn-audit-current
        run: |
          echo "üîç Running Yarn audit on current PR state..."
          
          # CRITICAL: Use yarn consistently
          yarn audit --json > yarn-audit-current.json 2>/dev/null || {
            echo "‚ö†Ô∏è Yarn audit found vulnerabilities in current state"
          }
          
          # Count vulnerabilities by severity
          CRITICAL_CURRENT=$(cat yarn-audit-current.json | grep -o '"severity":"critical"' | wc -l || echo "0")
          HIGH_CURRENT=$(cat yarn-audit-current.json | grep -o '"severity":"high"' | wc -l || echo "0")
          MODERATE_CURRENT=$(cat yarn-audit-current.json | grep -o '"severity":"moderate"' | wc -l || echo "0")
          LOW_CURRENT=$(cat yarn-audit-current.json | grep -o '"severity":"low"' | wc -l || echo "0")
          
          echo "critical-current=$CRITICAL_CURRENT" >> $GITHUB_OUTPUT
          echo "high-current=$HIGH_CURRENT" >> $GITHUB_OUTPUT
          echo "moderate-current=$MODERATE_CURRENT" >> $GITHUB_OUTPUT
          echo "low-current=$LOW_CURRENT" >> $GITHUB_OUTPUT
          
          echo "üìä Current State Vulnerabilities:"
          echo "  - üî¥ Critical: $CRITICAL_CURRENT"
          echo "  - üü† High: $HIGH_CURRENT"
          echo "  - üü° Moderate: $MODERATE_CURRENT"
          echo "  - üîµ Low: $LOW_CURRENT"

      - name: 'Compare with Base Branch'
        if: steps.dependency-diff.outputs.has-dependency-changes == 'true'
        id: vulnerability-comparison
        run: |
          echo "‚öñÔ∏è Comparing vulnerabilities with base branch..."
          
          BASE_BRANCH="${{ github.event.pull_request.base.ref || 'main' }}"
          
          # Switch to base branch and run audit
          git checkout origin/$BASE_BRANCH
          yarn install --frozen-lockfile > /dev/null 2>&1 || {
            echo "‚ö†Ô∏è Base branch dependency installation had issues"
          }
          
          yarn audit --json > yarn-audit-base.json 2>/dev/null || {
            echo "‚ö†Ô∏è Base branch has existing vulnerabilities"
          }
          
          # Count base vulnerabilities
          CRITICAL_BASE=$(cat yarn-audit-base.json | grep -o '"severity":"critical"' | wc -l || echo "0")
          HIGH_BASE=$(cat yarn-audit-base.json | grep -o '"severity":"high"' | wc -l || echo "0")
          
          # Switch back to PR branch
          git checkout ${{ github.event.pull_request.head.sha }}
          
          # Calculate differences
          CRITICAL_CURRENT="${{ steps.yarn-audit-current.outputs.critical-current }}"
          HIGH_CURRENT="${{ steps.yarn-audit-current.outputs.high-current }}"
          
          CRITICAL_DIFF=$((CRITICAL_CURRENT - CRITICAL_BASE))
          HIGH_DIFF=$((HIGH_CURRENT - HIGH_BASE))
          
          echo "critical-diff=$CRITICAL_DIFF" >> $GITHUB_OUTPUT
          echo "high-diff=$HIGH_DIFF" >> $GITHUB_OUTPUT
          
          echo "üìä Vulnerability Comparison:"
          echo "  - Critical vulnerabilities change: $CRITICAL_DIFF"
          echo "  - High vulnerabilities change: $HIGH_DIFF"
          
          # Determine if PR introduces new vulnerabilities
          if [[ $CRITICAL_DIFF -gt 0 ]] || [[ $HIGH_DIFF -gt 0 ]]; then
            echo "introduces-vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è This PR introduces new high/critical vulnerabilities"
          else
            echo "introduces-vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "‚úÖ This PR does not introduce new high/critical vulnerabilities"
          fi

      - name: 'License Compliance Check for New Dependencies'
        if: steps.dependency-diff.outputs.dependencies-added != '0'
        run: |
          echo "üìÑ Checking license compliance for new dependencies..."
          
          # CRITICAL: Use yarn consistently
          yarn add --dev license-checker
          
          # Generate license report
          yarn license-checker --json --out license-report-pr.json || {
            echo "‚ö†Ô∏è License checker completed with warnings"
          }
          
          # Check for prohibited licenses in new dependencies
          PROHIBITED_LICENSES="GPL-2.0 GPL-3.0 AGPL-1.0 AGPL-3.0 LGPL-2.1 LGPL-3.0"
          FOUND_PROHIBITED=""
          
          for license in $PROHIBITED_LICENSES; do
            if grep -q "$license" license-report-pr.json 2>/dev/null; then
              FOUND_PROHIBITED="$FOUND_PROHIBITED $license"
              echo "‚ö†Ô∏è Found potentially prohibited license: $license"
            fi
          done
          
          if [[ -n "$FOUND_PROHIBITED" ]]; then
            echo "## ‚ö†Ô∏è License Compliance Alert" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Potentially prohibited licenses found: $FOUND_PROHIBITED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review license compatibility before merging." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No prohibited licenses detected in new dependencies" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 'Generate Dependency Security Report'
        if: always()
        run: |
          echo "üìã Generating comprehensive dependency security report..."
          
          CRITICAL_CURRENT="${{ steps.yarn-audit-current.outputs.critical-current }}"
          HIGH_CURRENT="${{ steps.yarn-audit-current.outputs.high-current }}"
          MODERATE_CURRENT="${{ steps.yarn-audit-current.outputs.moderate-current }}"
          LOW_CURRENT="${{ steps.yarn-audit-current.outputs.low-current }}"
          
          INTRODUCES_VULNS="${{ steps.vulnerability-comparison.outputs.introduces-vulnerabilities }}"
          ADDED_DEPS="${{ steps.dependency-diff.outputs.dependencies-added }}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üì¶ Dependency Security Analysis
          
          **PR Impact**: ${{ steps.dependency-diff.outputs.has-dependency-changes == 'true' && 'Dependencies Modified' || 'No Dependency Changes' }}
          
          ### Current Vulnerability Count
          - üî¥ Critical: $CRITICAL_CURRENT
          - üü† High: $HIGH_CURRENT  
          - üü° Moderate: $MODERATE_CURRENT
          - üîµ Low: $LOW_CURRENT
          
          EOF
          
          if [[ "$INTRODUCES_VULNS" == "true" ]]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ### ‚ö†Ô∏è Security Impact
          **This PR introduces new high/critical vulnerabilities.**
          
          **Action Required**: 
          1. Review vulnerability details with \`yarn audit\`
          2. Update vulnerable dependencies to secure versions
          3. Consider using \`yarn audit --fix\` for automatic fixes
          4. Test thoroughly after applying fixes
          
          EOF
          elif [[ "$ADDED_DEPS" != "0" ]]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ### ‚úÖ Security Impact
          New dependencies added but no new high/critical vulnerabilities introduced.
          
          EOF
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ### üí° Security Best Practices
          - Regularly update dependencies to latest secure versions
          - Monitor security advisories for used packages
          - Consider using tools like Dependabot for automated updates
          - Review dependency licenses for compliance
          
          EOF

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB: Container Security Analysis for PR Changes
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  pr-container-security:
    name: 'PR Container Security Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: pr-security-preparation
    
    # WHY: Only run if container files changed or forced full scan
    if: |
      needs.pr-security-preparation.outputs.container-changes == 'true' ||
      needs.pr-security-preparation.outputs.scan-scope == 'full'
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: 'Checkout PR Branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: 'Analyze Container Changes'
        id: container-analysis
        run: |
          echo "üê≥ Analyzing container-related changes..."
          
          CHANGED_FILES="${{ needs.pr-security-preparation.outputs.changed-files }}"
          
          # Identify changed Dockerfiles
          CHANGED_DOCKERFILES=""
          CHANGED_COMPOSE_FILES=""
          
          for file in $CHANGED_FILES; do
            if [[ "$file" =~ ^.*Dockerfile.*$ ]]; then
              CHANGED_DOCKERFILES="$CHANGED_DOCKERFILES $file"
            elif [[ "$file" =~ ^.*docker-compose.*\.ya?ml$ ]]; then
              CHANGED_COMPOSE_FILES="$CHANGED_COMPOSE_FILES $file"
            fi
          done
          
          echo "changed-dockerfiles=$CHANGED_DOCKERFILES" >> $GITHUB_OUTPUT
          echo "changed-compose-files=$CHANGED_COMPOSE_FILES" >> $GITHUB_OUTPUT
          
          echo "üìä Container Analysis Results:"
          echo "  - Changed Dockerfiles: $CHANGED_DOCKERFILES"
          echo "  - Changed Compose files: $CHANGED_COMPOSE_FILES"

      - name: 'Build Changed Container Images'
        id: build-containers
        run: |
          echo "üî® Building container images for security scanning..."
          
          CHANGED_DOCKERFILES="${{ steps.container-analysis.outputs.changed-dockerfiles }}"
          CHANGED_COMPOSE_FILES="${{ steps.container-analysis.outputs.changed-compose-files }}"
          
          BUILT_IMAGES=""
          
          # Build from individual Dockerfiles
          for dockerfile in $CHANGED_DOCKERFILES; do
            if [[ -f "$dockerfile" ]]; then
              IMAGE_NAME="pr-security-$(basename $(dirname $dockerfile)):latest"
              echo "Building $IMAGE_NAME from $dockerfile..."
              
              docker build -t "$IMAGE_NAME" -f "$dockerfile" $(dirname "$dockerfile") || {
                echo "‚ö†Ô∏è Failed to build $IMAGE_NAME, continuing..."
                continue
              }
              
              BUILT_IMAGES="$BUILT_IMAGES $IMAGE_NAME"
            fi
          done
          
          # Build from Docker Compose if changed
          for compose_file in $CHANGED_COMPOSE_FILES; do
            if [[ -f "$compose_file" ]]; then
              echo "Building images from $compose_file..."
              # CRITICAL: Use `docker compose` (space) not `docker-compose` (hyphen)
              docker compose -f "$compose_file" build || {
                echo "‚ö†Ô∏è Failed to build from $compose_file, continuing..."
              }
            fi
          done
          
          echo "built-images=$BUILT_IMAGES" >> $GITHUB_OUTPUT
          echo "üèóÔ∏è Built images for scanning: $BUILT_IMAGES"

      - name: 'Run Trivy Security Scan'
        if: steps.build-containers.outputs.built-images != ''
        id: trivy-scan
        run: |
          echo "üîç Running Trivy security scan on built images..."
          
          BUILT_IMAGES="${{ steps.build-containers.outputs.built-images }}"
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          SCAN_RESULTS=""
          
          for image in $BUILT_IMAGES; do
            if docker image inspect "$image" &>/dev/null; then
              echo "Scanning $image..."
              
              # Run Trivy scan and capture results
              docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $(pwd):/workspace \
                aquasec/trivy:latest image \
                --format json \
                --output "/workspace/trivy-${image//[:\/]/-}.json" \
                --severity HIGH,CRITICAL \
                --quiet \
                "$image" || {
                echo "‚ö†Ô∏è Trivy scan completed with issues for $image"
              }
              
              # Count vulnerabilities if results exist
              if [[ -f "trivy-${image//[:\/]/-}.json" ]]; then
                CRITICAL_COUNT=$(cat "trivy-${image//[:\/]/-}.json" | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' 2>/dev/null || echo "0")
                HIGH_COUNT=$(cat "trivy-${image//[:\/]/-}.json" | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' 2>/dev/null || echo "0")
                
                TOTAL_CRITICAL=$((TOTAL_CRITICAL + CRITICAL_COUNT))
                TOTAL_HIGH=$((TOTAL_HIGH + HIGH_COUNT))
                
                SCAN_RESULTS="$SCAN_RESULTS\n- $image: $CRITICAL_COUNT critical, $HIGH_COUNT high"
              fi
              
              # Generate human-readable report
              docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy:latest image \
                --format table \
                --severity HIGH,CRITICAL \
                "$image" > "trivy-${image//[:\/]/-}-report.txt" || {
                echo "‚ö†Ô∏è Failed to generate table report for $image"
              }
            fi
          done
          
          echo "total-critical=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "total-high=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo -e "scan-results=$SCAN_RESULTS" >> $GITHUB_OUTPUT
          
          echo "üîç Container Security Scan Results:"
          echo "  - Total Critical: $TOTAL_CRITICAL"
          echo "  - Total High: $TOTAL_HIGH"

      - name: 'Generate Container Security Report'
        if: always()
        run: |
          echo "üìã Generating container security report..."
          
          TOTAL_CRITICAL="${{ steps.trivy-scan.outputs.total-critical }}"
          TOTAL_HIGH="${{ steps.trivy-scan.outputs.total-high }}"
          BUILT_IMAGES="${{ steps.build-containers.outputs.built-images }}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üê≥ Container Security Analysis
          
          **Images Analyzed**: $(echo $BUILT_IMAGES | wc -w)
          
          ### Vulnerability Summary
          - üî¥ Critical: ${TOTAL_CRITICAL:-0}
          - üü† High: ${TOTAL_HIGH:-0}
          
          EOF
          
          if [[ "${TOTAL_CRITICAL:-0}" -gt 0 ]] || [[ "${TOTAL_HIGH:-0}" -gt 0 ]]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ### ‚ö†Ô∏è Action Required
          High or critical vulnerabilities found in container images.
          
          **Recommended Actions**:
          1. Update base images to latest secure versions
          2. Review and update installed packages
          3. Use minimal base images when possible
          4. Implement multi-stage builds to reduce attack surface
          5. Regularly scan images in your CI/CD pipeline
          
          EOF
          else
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ### ‚úÖ Security Status
          No high or critical vulnerabilities found in analyzed container images.
          
          EOF
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ### üí° Container Security Best Practices
          - Use official, minimal base images
          - Keep base images and packages updated
          - Run containers as non-root users
          - Use .dockerignore to exclude unnecessary files
          - Implement proper secret management
          - Scan images regularly for vulnerabilities
          
          EOF

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB: Security Score Calculation & PR Summary
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  pr-security-summary:
    name: 'Security Summary & PR Comment'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: 
      - pr-security-preparation
      - pr-secret-detection
      - pr-dependency-analysis
      - pr-container-security
    
    # WHY: Always run to provide summary, even if some jobs are skipped
    if: always() && needs.pr-security-preparation.result == 'success'
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: 'Calculate Security Score'
        id: security-score
        run: |
          echo "üìä Calculating overall security score for PR..."
          
          # Base score starts at 100
          SCORE=100
          CRITICAL_ISSUES=0
          HIGH_ISSUES=0
          WARNINGS=0
          
          # Check secret detection results
          if [[ "${{ needs.pr-secret-detection.result }}" == "success" ]]; then
            SECRETS_FOUND="${{ needs.pr-secret-detection.outputs.secrets-found || '0' }}"
            if [[ "$SECRETS_FOUND" != "0" ]]; then
              SCORE=$((SCORE - 50))  # Major penalty for secrets
              CRITICAL_ISSUES=$((CRITICAL_ISSUES + SECRETS_FOUND))
            fi
          elif [[ "${{ needs.pr-secret-detection.result }}" == "failure" ]]; then
            SCORE=$((SCORE - 30))
            HIGH_ISSUES=$((HIGH_ISSUES + 1))
          fi
          
          # Check dependency analysis results
          if [[ "${{ needs.pr-dependency-analysis.outputs.introduces-vulnerabilities || 'false' }}" == "true" ]]; then
            SCORE=$((SCORE - 30))
            HIGH_ISSUES=$((HIGH_ISSUES + 1))
          fi
          
          # Check container security results  
          CONTAINER_CRITICAL="${{ needs.pr-container-security.outputs.total-critical || '0' }}"
          CONTAINER_HIGH="${{ needs.pr-container-security.outputs.total-high || '0' }}"
          
          if [[ "$CONTAINER_CRITICAL" != "0" ]]; then
            SCORE=$((SCORE - 25))
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + CONTAINER_CRITICAL))
          fi
          
          if [[ "$CONTAINER_HIGH" != "0" ]]; then
            SCORE=$((SCORE - 15))
            HIGH_ISSUES=$((HIGH_ISSUES + CONTAINER_HIGH))
          fi
          
          # Apply security impact modifier
          SECURITY_IMPACT="${{ needs.pr-security-preparation.outputs.security-impact }}"
          case "$SECURITY_IMPACT" in
            critical)
              SCORE=$((SCORE - 10))
              ;;
            high)
              SCORE=$((SCORE - 5))
              ;;
          esac
          
          # Ensure score doesn't go below 0
          if [[ $SCORE -lt 0 ]]; then
            SCORE=0
          fi
          
          # Determine overall status
          if [[ $SCORE -ge 90 ]]; then
            STATUS="EXCELLENT"
            STATUS_EMOJI="‚úÖ"
          elif [[ $SCORE -ge 75 ]]; then
            STATUS="GOOD"
            STATUS_EMOJI="üëç"
          elif [[ $SCORE -ge 60 ]]; then
            STATUS="ACCEPTABLE"
            STATUS_EMOJI="‚ö†Ô∏è"
          elif [[ $SCORE -ge 40 ]]; then
            STATUS="NEEDS_ATTENTION"
            STATUS_EMOJI="üîç"
          else
            STATUS="CRITICAL_ISSUES"
            STATUS_EMOJI="üö®"
          fi
          
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "status-emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "high-issues=$HIGH_ISSUES" >> $GITHUB_OUTPUT
          
          echo "üéØ Security Score: $SCORE/100 ($STATUS)"
          echo "üìä Issues: $CRITICAL_ISSUES critical, $HIGH_ISSUES high"

      - name: 'Determine PR Block Status'
        id: pr-gate
        run: |
          SCORE="${{ steps.security-score.outputs.score }}"
          CRITICAL_ISSUES="${{ steps.security-score.outputs.critical-issues }}"
          
          # Block PR if critical issues or very low score
          if [[ $CRITICAL_ISSUES -gt 0 ]] || [[ $SCORE -lt 40 ]]; then
            SHOULD_BLOCK="true"
            BLOCK_REASON="Critical security issues detected"
          else
            SHOULD_BLOCK="false"
            BLOCK_REASON=""
          fi
          
          echo "should-block=$SHOULD_BLOCK" >> $GITHUB_OUTPUT
          echo "block-reason=$BLOCK_REASON" >> $GITHUB_OUTPUT
          
          echo "üö™ PR Gate Decision: $([ "$SHOULD_BLOCK" == "true" ] && echo "BLOCK" || echo "ALLOW")"

      - name: 'Generate Educational PR Comment'
        uses: actions/github-script@v7
        with:
          script: |
            const score = "${{ steps.security-score.outputs.score }}";
            const status = "${{ steps.security-score.outputs.status }}";
            const statusEmoji = "${{ steps.security-score.outputs.status-emoji }}";
            const criticalIssues = "${{ steps.security-score.outputs.critical-issues }}";
            const highIssues = "${{ steps.security-score.outputs.high-issues }}";
            const shouldBlock = "${{ steps.pr-gate.outputs.should-block }}";
            const securityImpact = "${{ needs.pr-security-preparation.outputs.security-impact }}";
            
            // Generate educational content based on findings
            let educationalContent = "";
            let actionItems = [];
            
            // Secret detection results
            const secretsFound = "${{ needs.pr-secret-detection.outputs.secrets-found || '0' }}";
            if (secretsFound !== "0") {
              educationalContent += `
            ### üîê Secret Detection Alert
            
            **${secretsFound} potential secrets detected!** This is a critical security risk.
            
            **Why this matters**: Exposed secrets can lead to unauthorized access, data breaches, and financial losses.
            
            **What to do**:
            1. Remove secrets from code immediately
            2. Use environment variables or secret management systems
            3. Rotate any exposed credentials
            4. Consider using tools like git-secrets to prevent future commits
            `;
              actionItems.push("üîê **CRITICAL**: Remove exposed secrets");
            }
            
            // Dependency vulnerability results
            const introducesVulns = "${{ needs.pr-dependency-analysis.outputs.introduces-vulnerabilities || 'false' }}";
            if (introducesVulns === "true") {
              educationalContent += `
            ### üì¶ Dependency Vulnerability Alert
            
            **This PR introduces new high/critical vulnerabilities.**
            
            **Why this matters**: Vulnerable dependencies are a common attack vector. Attackers often target known vulnerabilities in popular packages.
            
            **What to do**:
            1. Run \`yarn audit\` to see detailed vulnerability information
            2. Update vulnerable packages to secure versions
            3. Use \`yarn audit --fix\` for automatic fixes where possible
            4. Consider alternative packages if vulnerabilities can't be resolved
            `;
              actionItems.push("üì¶ Update vulnerable dependencies");
            }
            
            // Container security results
            const containerCritical = "${{ needs.pr-container-security.outputs.total-critical || '0' }}";
            const containerHigh = "${{ needs.pr-container-security.outputs.total-high || '0' }}";
            if (containerCritical !== "0" || containerHigh !== "0") {
              educationalContent += `
            ### üê≥ Container Security Issues
            
            **Found ${containerCritical} critical and ${containerHigh} high severity vulnerabilities in container images.**
            
            **Why this matters**: Container vulnerabilities can be exploited to compromise your application and infrastructure.
            
            **What to do**:
            1. Update base images to latest secure versions
            2. Use minimal images (like alpine) to reduce attack surface
            3. Regularly scan and update your container images
            4. Implement multi-stage builds to exclude build tools from final images
            `;
              actionItems.push("üê≥ Fix container vulnerabilities");
            }
            
            // Generate main comment
            const comment = `## ${statusEmoji} Security Analysis Results
            
            **Overall Security Score: ${score}/100 (${status})**
            
            | Category | Status | Details |
            |----------|--------|---------|
            | üîê Secret Detection | ${secretsFound === "0" ? "‚úÖ No secrets" : "‚ùå " + secretsFound + " found"} | Scanned changed files for exposed credentials |
            | üì¶ Dependency Security | ${introducesVulns === "false" ? "‚úÖ No new vulns" : "‚ùå New vulnerabilities"} | Analyzed dependency changes and vulnerabilities |
            | üê≥ Container Security | ${containerCritical === "0" && containerHigh === "0" ? "‚úÖ Secure" : "‚ùå " + (parseInt(containerCritical) + parseInt(containerHigh)) + " issues"} | Scanned container images for vulnerabilities |
            
            ${shouldBlock === "true" ? `
            ### üö® PR Blocked - Critical Issues Detected
            
            This PR cannot be merged due to critical security issues. Please address the issues below before requesting review.
            ` : `
            ### ‚úÖ Security Review Complete
            
            ${criticalIssues === "0" ? "No critical security issues detected. " : ""}This PR has undergone comprehensive security analysis.
            `}
            
            ${actionItems.length > 0 ? `
            ### üéØ Action Items Required
            
            ${actionItems.map(item => "- " + item).join("\n")}
            ` : ""}
            
            ${educationalContent}
            
            <details>
            <summary>üìö Security Best Practices for Developers</summary>
            
            #### General Security Guidelines
            - **Never commit secrets**: Use environment variables, secret managers, or config files (gitignored)
            - **Keep dependencies updated**: Regularly update packages and monitor for security advisories
            - **Use security linters**: Integrate tools like ESLint security plugins in your editor
            - **Follow least privilege**: Grant minimal necessary permissions to users and services
            
            #### Dependency Security
            - **Pin versions**: Use exact versions in package.json for reproducible builds
            - **Audit regularly**: Run \`yarn audit\` before releases and in CI/CD
            - **Monitor advisories**: Subscribe to security advisories for your dependencies
            - **Use lock files**: Commit yarn.lock/package-lock.json to ensure consistent installs
            
            #### Container Security  
            - **Use official images**: Prefer official, regularly updated base images
            - **Minimize image size**: Use multi-stage builds and minimal base images
            - **Scan regularly**: Integrate container scanning into your CI/CD pipeline
            - **Update regularly**: Keep base images and system packages updated
            
            #### Secret Management
            - **Environment variables**: Use env vars for configuration and secrets
            - **Secret managers**: Consider HashiCorp Vault, AWS Secrets Manager, or similar
            - **Rotation**: Regularly rotate credentials and API keys
            - **Scope limits**: Use credentials with minimal necessary permissions
            
            </details>
            
            ---
            
            üîç **Need Help?** Check the [Security tab](../../../security) for detailed findings, or reach out to the security team for guidance.
            
            *This analysis was performed automatically by the PR Security Analysis workflow.*`;
            
            // Post the comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 'Create PR Check Status'
        uses: actions/github-script@v7
        with:
          script: |
            const shouldBlock = "${{ steps.pr-gate.outputs.should-block }}";
            const score = "${{ steps.security-score.outputs.score }}";
            const status = "${{ steps.security-score.outputs.status }}";
            
            const checkStatus = shouldBlock === "true" ? "failure" : "success";
            const conclusion = shouldBlock === "true" ? "failure" : "success";
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Security Analysis Gate",
              head_sha: "${{ github.event.pull_request.head.sha }}",
              status: "completed",
              conclusion: conclusion,
              output: {
                title: `Security Score: ${score}/100 (${status})`,
                summary: shouldBlock === "true" ? 
                  "‚ùå PR blocked due to critical security issues. Please address the issues and re-run the analysis." :
                  "‚úÖ PR passed security analysis. No critical issues detected."
              }
            });

      - name: 'Set Final Workflow Status'
        run: |
          SHOULD_BLOCK="${{ steps.pr-gate.outputs.should-block }}"
          SCORE="${{ steps.security-score.outputs.score }}"
          
          echo "## üîí Final Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Score**: $SCORE/100" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.security-score.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$SHOULD_BLOCK" == "true" ]]; then
            echo "üö® **PR BLOCKED**: Critical security issues must be resolved before merging." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR cannot be merged until security issues are addressed." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "‚úÖ **PR APPROVED**: Security analysis completed successfully." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR has passed security analysis and can proceed to review." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi